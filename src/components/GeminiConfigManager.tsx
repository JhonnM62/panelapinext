'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useGeminiConfig, useDirectIA } from '@/hooks/useGeminiConfig';\nimport { GeminiConfigData, ProcessIAResponse } from '@/lib/enhanced-baileys-api';\nimport { Loader2, Save, TestTube, Trash2, RefreshCw, MessageSquare, Zap } from 'lucide-react';\n\ninterface GeminiConfigManagerProps {\n  onConfigSaved?: (config: GeminiConfigData) => void;\n  onConfigDeleted?: () => void;\n}\n\nconst DEFAULT_CONFIG: Omit<GeminiConfigData, 'id' | 'fechaCreacion' | 'ultimaActualizacion'> = {\n  userbot: '',\n  apikey: '',\n  server: 'http://100.42.185.2:8015',\n  promt: 'Eres un asistente virtual útil y amigable. Responde de manera clara y concisa.',\n  pais: 'colombia',\n  idioma: 'es',\n  numerodemensajes: 8,\n  delay_seconds: 8,\n  temperature: 0.0,\n  topP: 0.9,\n  maxOutputTokens: 512,\n  pause_timeout_minutes: 30,\n  ai_model: 'gemini-2.5-flash',\n  thinking_budget: -1,\n  activo: true\n};\n\nconst COUNTRIES = [\n  { value: 'colombia', label: 'Colombia' },\n  { value: 'mexico', label: 'México' },\n  { value: 'argentina', label: 'Argentina' },\n  { value: 'chile', label: 'Chile' },\n  { value: 'peru', label: 'Perú' },\n  { value: 'españa', label: 'España' },\n  { value: 'usa', label: 'Estados Unidos' }\n];\n\nconst LANGUAGES = [\n  { value: 'es', label: 'Español' },\n  { value: 'en', label: 'English' },\n  { value: 'pt', label: 'Português' }\n];\n\nconst AI_MODELS = [\n  { value: 'gemini-2.5-flash', label: 'Gemini 2.5 Flash (Rápido)' },\n  { value: 'gemini-2.5-pro', label: 'Gemini 2.5 Pro (Avanzado)' },\n  { value: 'gemini-2.0-flash', label: 'Gemini 2.0 Flash (Estable)' }\n];\n\nexport const GeminiConfigManager: React.FC<GeminiConfigManagerProps> = ({\n  onConfigSaved,\n  onConfigDeleted\n}) => {\n  const { config, isLoading, error, saveConfig, updateConfig, deleteConfig, testConfig, refresh } = useGeminiConfig();\n  const { isProcessing, processIADirect } = useDirectIA();\n  \n  const [formData, setFormData] = useState<Omit<GeminiConfigData, 'id' | 'fechaCreacion' | 'ultimaActualizacion'>>(DEFAULT_CONFIG);\n  const [testMessage, setTestMessage] = useState('Hola, ¿cómo estás?');\n  const [testResult, setTestResult] = useState<ProcessIAResponse | null>(null);\n  const [isTesting, setIsTesting] = useState(false);\n  const [activeTab, setActiveTab] = useState('config');\n\n  // Cargar configuración existente cuando se obtiene del servidor\n  useEffect(() => {\n    if (config) {\n      setFormData({\n        userbot: config.userbot,\n        apikey: config.apikey,\n        server: config.server,\n        promt: config.promt,\n        pais: config.pais,\n        idioma: config.idioma,\n        numerodemensajes: config.numerodemensajes,\n        delay_seconds: config.delay_seconds,\n        temperature: config.temperature,\n        topP: config.topP,\n        maxOutputTokens: config.maxOutputTokens,\n        pause_timeout_minutes: config.pause_timeout_minutes,\n        ai_model: config.ai_model,\n        thinking_budget: config.thinking_budget,\n        activo: config.activo\n      });\n    }\n  }, [config]);\n\n  const handleInputChange = (field: keyof typeof formData, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSave = async () => {\n    try {\n      let success = false;\n      \n      if (config?.id) {\n        // Actualizar configuración existente\n        success = await updateConfig(config.id, formData);\n      } else {\n        // Crear nueva configuración\n        success = await saveConfig(formData);\n      }\n      \n      if (success && onConfigSaved) {\n        onConfigSaved(config!);\n      }\n    } catch (error) {\n      console.error('Error saving config:', error);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!config?.id) return;\n    \n    const confirmed = window.confirm('¿Estás seguro de que quieres eliminar esta configuración?');\n    if (!confirmed) return;\n    \n    const success = await deleteConfig(config.id);\n    if (success && onConfigDeleted) {\n      onConfigDeleted();\n    }\n  };\n\n  const handleTest = async () => {\n    setIsTesting(true);\n    setTestResult(null);\n    \n    try {\n      const testConfigData: GeminiConfigData = {\n        ...formData,\n        id: config?.id || 'test'\n      };\n      \n      const result = await processIADirect({\n        body: testMessage,\n        number: '123456789',\n        config: testConfigData\n      });\n      \n      setTestResult(result);\n      setActiveTab('test');\n    } catch (error) {\n      console.error('Error testing config:', error);\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n          Cargando configuración...\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Configuración de Gemini IA</h2>\n          <p className=\"text-muted-foreground\">\n            Configura tu asistente de inteligencia artificial\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {config && (\n            <Badge variant={config.activo ? 'default' : 'secondary'}>\n              {config.activo ? 'Activo' : 'Inactivo'}\n            </Badge>\n          )}\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={refresh}\n            disabled={isLoading}\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"config\">Configuración</TabsTrigger>\n          <TabsTrigger value=\"advanced\">Avanzado</TabsTrigger>\n          <TabsTrigger value=\"test\">Pruebas</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"config\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Configuración Básica</CardTitle>\n              <CardDescription>\n                Configuración principal para tu asistente IA\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"userbot\">Nombre del Bot</Label>\n                  <Input\n                    id=\"userbot\"\n                    value={formData.userbot}\n                    onChange={(e) => handleInputChange('userbot', e.target.value)}\n                    placeholder=\"mi-bot-ia\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"apikey\">API Key de Gemini</Label>\n                  <Input\n                    id=\"apikey\"\n                    type=\"password\"\n                    value={formData.apikey}\n                    onChange={(e) => handleInputChange('apikey', e.target.value)}\n                    placeholder=\"AIzaSy...\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"promt\">Prompt del Sistema</Label>\n                <Textarea\n                  id=\"promt\"\n                  value={formData.promt}\n                  onChange={(e) => handleInputChange('promt', e.target.value)}\n                  placeholder=\"Eres un asistente virtual...\"\n                  rows={4}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"pais\">País</Label>\n                  <Select value={formData.pais} onValueChange={(value) => handleInputChange('pais', value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {COUNTRIES.map((country) => (\n                        <SelectItem key={country.value} value={country.value}>\n                          {country.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"idioma\">Idioma</Label>\n                  <Select value={formData.idioma} onValueChange={(value) => handleInputChange('idioma', value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {LANGUAGES.map((language) => (\n                        <SelectItem key={language.value} value={language.value}>\n                          {language.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ai_model\">Modelo de IA</Label>\n                  <Select value={formData.ai_model} onValueChange={(value) => handleInputChange('ai_model', value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {AI_MODELS.map((model) => (\n                        <SelectItem key={model.value} value={model.value}>\n                          {model.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"activo\"\n                  checked={formData.activo}\n                  onCheckedChange={(checked) => handleInputChange('activo', checked)}\n                />\n                <Label htmlFor=\"activo\">Configuración activa</Label>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"advanced\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Configuración Avanzada</CardTitle>\n              <CardDescription>\n                Parámetros técnicos para personalizar el comportamiento\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"temperature\">Temperature ({formData.temperature})</Label>\n                  <Input\n                    id=\"temperature\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={formData.temperature}\n                    onChange={(e) => handleInputChange('temperature', parseFloat(e.target.value))}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"topP\">Top P ({formData.topP})</Label>\n                  <Input\n                    id=\"topP\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={formData.topP}\n                    onChange={(e) => handleInputChange('topP', parseFloat(e.target.value))}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"maxOutputTokens\">Máximo Tokens de Respuesta</Label>\n                  <Input\n                    id=\"maxOutputTokens\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"8192\"\n                    value={formData.maxOutputTokens}\n                    onChange={(e) => handleInputChange('maxOutputTokens', parseInt(e.target.value))}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"numerodemensajes\">Número de Mensajes de Contexto</Label>\n                  <Input\n                    id=\"numerodemensajes\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"50\"\n                    value={formData.numerodemensajes}\n                    onChange={(e) => handleInputChange('numerodemensajes', parseInt(e.target.value))}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"delay_seconds\">Delay entre Respuestas (segundos)</Label>\n                  <Input\n                    id=\"delay_seconds\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"60\"\n                    value={formData.delay_seconds}\n                    onChange={(e) => handleInputChange('delay_seconds', parseInt(e.target.value))}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"pause_timeout_minutes\">Timeout de Pausa (minutos)</Label>\n                  <Input\n                    id=\"pause_timeout_minutes\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1440\"\n                    value={formData.pause_timeout_minutes}\n                    onChange={(e) => handleInputChange('pause_timeout_minutes', parseInt(e.target.value))}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"server\">Servidor de WhatsApp</Label>\n                <Input\n                  id=\"server\"\n                  value={formData.server}\n                  onChange={(e) => handleInputChange('server', e.target.value)}\n                  placeholder=\"http://100.42.185.2:8015\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"test\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Probar Configuración</CardTitle>\n              <CardDescription>\n                Envía un mensaje de prueba para verificar que la configuración funciona\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"testMessage\">Mensaje de Prueba</Label>\n                <Textarea\n                  id=\"testMessage\"\n                  value={testMessage}\n                  onChange={(e) => setTestMessage(e.target.value)}\n                  placeholder=\"Escribe un mensaje para probar...\"\n                  rows={3}\n                />\n              </div>\n              \n              <Button\n                onClick={handleTest}\n                disabled={isTesting || !formData.apikey || !testMessage.trim()}\n              >\n                {isTesting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Probando...\n                  </>\n                ) : (\n                  <>\n                    <TestTube className=\"h-4 w-4 mr-2\" />\n                    Probar Configuración\n                  </>\n                )}\n              </Button>\n\n              {testResult && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm\">\n                      Resultado de la Prueba\n                      <Badge \n                        className=\"ml-2\" \n                        variant={testResult.success ? 'default' : 'destructive'}\n                      >\n                        {testResult.success ? 'Éxito' : 'Error'}\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {testResult.success ? (\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label className=\"text-sm font-medium\">Respuesta:</Label>\n                          <div className=\"mt-1 p-3 bg-muted rounded-md\">\n                            {testResult.response}\n                          </div>\n                        </div>\n                        \n                        {testResult.thinking && (\n                          <div>\n                            <Label className=\"text-sm font-medium\">Proceso de Pensamiento:</Label>\n                            <div className=\"mt-1 p-3 bg-muted rounded-md text-sm\">\n                              {testResult.thinking}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {testResult.usage && (\n                          <div className=\"flex gap-4 text-sm text-muted-foreground\">\n                            <span>Tokens usados: {testResult.usage.totalTokens}</span>\n                            <span>Prompt: {testResult.usage.promptTokens}</span>\n                            <span>Respuesta: {testResult.usage.responseTokens}</span>\n                          </div>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-destructive\">\n                        <Label className=\"text-sm font-medium\">Error:</Label>\n                        <div className=\"mt-1 p-3 bg-destructive/10 rounded-md\">\n                          {testResult.error}\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"flex items-center justify-between pt-6\">\n        <div className=\"flex gap-2\">\n          {config?.id && (\n            <Button\n              variant=\"destructive\"\n              onClick={handleDelete}\n              disabled={isLoading}\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Eliminar\n            </Button>\n          )}\n        </div>\n        \n        <Button\n          onClick={handleSave}\n          disabled={isLoading || !formData.apikey || !formData.userbot}\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              Guardando...\n            </>\n          ) : (\n            <>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {config?.id ? 'Actualizar' : 'Guardar'} Configuración\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GeminiConfigManager;\n