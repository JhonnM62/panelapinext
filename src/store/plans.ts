import { create } from 'zustand'\nimport { PricingPlan, PaymentRequest, PaymentResponse } from '@/types'\nimport { api } from '@/lib/api'\n\ninterface PlansState {\n  plans: PricingPlan[]\n  isLoading: boolean\n  error: string | null\n  \n  // Actions\n  fetchPlans: () => Promise<void>\n  createPlan: (plan: Omit<PricingPlan, 'id'>) => Promise<void>\n  updatePlan: (id: string, plan: Partial<PricingPlan>) => Promise<void>\n  deletePlan: (id: string) => Promise<void>\n  togglePlanActive: (id: string) => Promise<void>\n  processPayment: (paymentRequest: PaymentRequest) => Promise<PaymentResponse>\n  clearError: () => void\n}\n\nconst defaultPlans: PricingPlan[] = [\n  {\n    id: 'basic',\n    name: 'Prueba Gratuita',\n    price: 0,\n    duration: 1,\n    maxSessions: 1,\n    features: [\n      '1 día de acceso',\n      '1 sesión de WhatsApp',\n      'Mensajes básicos',\n      'Soporte por email'\n    ],\n    isActive: true\n  },\n  {\n    id: 'monthly',\n    name: 'Plan Mensual',\n    price: 7,\n    duration: 30,\n    maxSessions: 1,\n    features: [\n      '1 sesión de WhatsApp',\n      'Mensajes ilimitados',\n      'Automatización básica',\n      'Soporte 24/7',\n      'Analytics básicos'\n    ],\n    isActive: true\n  },\n  {\n    id: 'semiannual',\n    name: 'Plan 6 Meses',\n    price: 37.8,\n    originalPrice: 42,\n    discount: 10,\n    duration: 180,\n    maxSessions: 1,\n    features: [\n      '1 sesión de WhatsApp',\n      'Mensajes ilimitados',\n      'Automatización avanzada',\n      'Soporte prioritario 24/7',\n      'Analytics completos',\n      'Plantillas personalizadas',\n      '10% de descuento'\n    ],\n    popular: true,\n    isActive: true\n  },\n  {\n    id: 'annual',\n    name: 'Plan Anual',\n    price: 67.2,\n    originalPrice: 84,\n    discount: 20,\n    duration: 365,\n    maxSessions: 1,\n    features: [\n      '1 sesión de WhatsApp',\n      'Mensajes ilimitados',\n      'Automatización completa',\n      'Soporte VIP 24/7',\n      'Analytics avanzados',\n      'Plantillas premium',\n      'API personalizada',\n      '20% de descuento'\n    ],\n    isActive: true\n  },\n  {\n    id: 'lifetime',\n    name: 'Plan Vitalicio',\n    price: 100,\n    duration: 36500,\n    maxSessions: 15,\n    features: [\n      'Hasta 15 sesiones de WhatsApp',\n      'Mensajes ilimitados',\n      'Todas las funciones premium',\n      'Soporte VIP de por vida',\n      'Analytics profesionales',\n      'API completa',\n      'Actualizaciones gratuitas',\n      'Garantía de 1 año',\n      'Acceso vitalicio'\n    ],\n    isActive: true\n  }\n]\n\nexport const usePlansStore = create<PlansState>((set, get) => ({\n  plans: defaultPlans,\n  isLoading: false,\n  error: null,\n\n  fetchPlans: async () => {\n    try {\n      set({ isLoading: true, error: null })\n      \n      // Por ahora usar datos por defecto\n      // En producción, hacer llamada a API:\n      // const response = await api.get('/api/plans')\n      // set({ plans: response.data, isLoading: false })\n      \n      // Simular delay de API\n      await new Promise(resolve => setTimeout(resolve, 500))\n      set({ plans: defaultPlans, isLoading: false })\n      \n    } catch (error: any) {\n      set({ \n        error: error.response?.data?.message || 'Error al obtener planes',\n        isLoading: false \n      })\n    }\n  },\n\n  createPlan: async (planData) => {\n    try {\n      set({ isLoading: true, error: null })\n      \n      // Simular llamada a API\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      const newPlan: PricingPlan = {\n        ...planData,\n        id: `custom_${Date.now()}`\n      }\n      \n      set((state) => ({\n        plans: [...state.plans, newPlan],\n        isLoading: false\n      }))\n      \n    } catch (error: any) {\n      set({ \n        error: error.response?.data?.message || 'Error al crear plan',\n        isLoading: false \n      })\n      throw error\n    }\n  },\n\n  updatePlan: async (id, planData) => {\n    try {\n      set({ isLoading: true, error: null })\n      \n      // Simular llamada a API\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      set((state) => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, ...planData } : plan\n        ),\n        isLoading: false\n      }))\n      \n    } catch (error: any) {\n      set({ \n        error: error.response?.data?.message || 'Error al actualizar plan',\n        isLoading: false \n      })\n      throw error\n    }\n  },\n\n  deletePlan: async (id) => {\n    try {\n      set({ isLoading: true, error: null })\n      \n      // Simular llamada a API\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      set((state) => ({\n        plans: state.plans.filter(plan => plan.id !== id),\n        isLoading: false\n      }))\n      \n    } catch (error: any) {\n      set({ \n        error: error.response?.data?.message || 'Error al eliminar plan',\n        isLoading: false \n      })\n      throw error\n    }\n  },\n\n  togglePlanActive: async (id) => {\n    try {\n      set((state) => ({\n        plans: state.plans.map(plan => \n          plan.id === id ? { ...plan, isActive: !plan.isActive } : plan\n        )\n      }))\n      \n      // Simular llamada a API\n      await new Promise(resolve => setTimeout(resolve, 500))\n      \n    } catch (error: any) {\n      set({ \n        error: error.response?.data?.message || 'Error al cambiar estado del plan'\n      })\n      throw error\n    }\n  },\n\n  processPayment: async (paymentRequest) => {\n    try {\n      set({ isLoading: true, error: null })\n      \n      // En producción, hacer llamada a API de pagos\n      // const response = await api.post('/api/payments/process', paymentRequest)\n      \n      // Simular procesamiento de pago\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      const mockResponse: PaymentResponse = {\n        success: true,\n        paymentId: `pay_${Date.now()}`,\n        token: 'new_jwt_token_here',\n        message: 'Pago procesado exitosamente'\n      }\n      \n      set({ isLoading: false })\n      return mockResponse\n      \n    } catch (error: any) {\n      set({ \n        error: error.response?.data?.message || 'Error al procesar pago',\n        isLoading: false \n      })\n      throw error\n    }\n  },\n\n  clearError: () => set({ error: null })\n}))\n