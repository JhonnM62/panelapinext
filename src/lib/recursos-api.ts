import { planesApi } from './plans'\n\n// 🔧 **API PARA GESTIÓN DE RECURSOS CON LÍMITES**\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://100.42.185.2:8015'\n\n// Interfaces para recursos\nexport interface Session {\n  id: string\n  name: string\n  status: 'authenticated' | 'connecting' | 'disconnected'\n  qr?: string\n  createdAt: string\n  updatedAt: string\n  active: boolean\n}\n\nexport interface BotIA {\n  id: string\n  nombre: string\n  descripcion: string\n  sesionId: string\n  tipoBot: 'ia'\n  configIA: {\n    activo: boolean\n    userbot: string\n    apikey: string\n    promt: string\n    ai_model: string\n  }\n  estado: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Webhook {\n  id: string\n  userId: string\n  sessionId: string\n  events: string[]\n  webhookUrl: string | null\n  active: boolean\n  createdAt: string\n  updatedAt: string\n}\n\n// 🔧 **FUNCIONES PARA SESIONES**\nexport const sesionesApi = {\n  // Obtener todas las sesiones del usuario\n  async obtenerSesiones(): Promise<Session[]> {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/api/v2/sesiones/user?token=${token}`)\n      if (!response.ok) throw new Error('Error al obtener sesiones')\n      \n      const data = await response.json()\n      return data.success ? data.data : []\n    } catch (error) {\n      console.error('Error obteniendo sesiones:', error)\n      return []\n    }\n  },\n\n  // Crear nueva sesión\n  async crearSesion(nombre: string): Promise<{ success: boolean; data?: any; error?: string }> {\n    try {\n      // Verificar límites primero\n      const verificacion = await planesApi.verificarLimites('sesion')\n      if (!verificacion.permitido) {\n        return {\n          success: false,\n          error: `Has alcanzado el límite de sesiones (${verificacion.usoActual}/${verificacion.limite}) para tu plan ${verificacion.plan}`\n        }\n      }\n\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/sessions/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          id: nombre,\n          token: token\n        })\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success || response.ok,\n        data: data.data,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error creando sesión:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  },\n\n  // Eliminar sesión\n  async eliminarSesion(sessionId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/sessions/delete/${sessionId}`, {\n        method: 'DELETE'\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success || response.ok,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error eliminando sesión:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  }\n}\n\n// 🔧 **FUNCIONES PARA BOTS IA**\nexport const botsIAApi = {\n  // Obtener todos los bots IA del usuario\n  async obtenerBots(): Promise<BotIA[]> {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      // Obtener la configuración de Gemini que contiene los bots IA\n      const response = await fetch(`${API_BASE_URL}/api/v2/gemini/config`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return [] // No hay bots configurados\n        }\n        throw new Error('Error al obtener bots IA')\n      }\n      \n      const data = await response.json()\n      \n      // Convertir el formato de respuesta a array de bots\n      if (data.success && data.data) {\n        return [{\n          id: data.data.botId,\n          nombre: data.data.nombreBot,\n          descripcion: data.data.descripcion || 'Bot IA configurado',\n          sesionId: data.data.sesionId,\n          tipoBot: 'ia' as const,\n          configIA: {\n            activo: data.data.activo,\n            userbot: data.data.userbot,\n            apikey: data.data.apikey ? 'Configurado' : 'No configurado',\n            promt: data.data.promt,\n            ai_model: data.data.ai_model\n          },\n          estado: data.data.activo ? 'activo' : 'pausado',\n          createdAt: data.data.fechaCreacion,\n          updatedAt: data.data.ultimaActualizacion\n        }]\n      }\n      \n      return []\n    } catch (error) {\n      console.error('Error obteniendo bots IA:', error)\n      return []\n    }\n  },\n\n  // Crear/configurar nuevo bot IA\n  async crearBot(config: {\n    sesionId: string\n    userbot: string\n    apikey: string\n    promt: string\n    ai_model?: string\n    activo?: boolean\n  }): Promise<{ success: boolean; data?: any; error?: string }> {\n    try {\n      // Verificar límites primero\n      const verificacion = await planesApi.verificarLimites('botIA')\n      if (!verificacion.permitido) {\n        return {\n          success: false,\n          error: `Has alcanzado el límite de bots IA (${verificacion.usoActual}/${verificacion.limite}) para tu plan ${verificacion.plan}`\n        }\n      }\n\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/api/v2/gemini/config/save`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          sesionId: config.sesionId,\n          userbot: config.userbot,\n          apikey: config.apikey,\n          promt: config.promt,\n          ai_model: config.ai_model || 'gemini-2.5-flash',\n          activo: config.activo !== undefined ? config.activo : true\n        })\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success,\n        data: data.data,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error creando bot IA:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  },\n\n  // Actualizar configuración de bot IA\n  async actualizarBot(config: {\n    sesionId?: string\n    userbot?: string\n    apikey?: string\n    promt?: string\n    ai_model?: string\n    activo?: boolean\n  }): Promise<{ success: boolean; error?: string }> {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/api/v2/gemini/config/save`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(config)\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error actualizando bot IA:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  },\n\n  // Eliminar bot IA\n  async eliminarBot(botId?: string, sesionId?: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/api/v2/gemini/config/delete`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ botId, sesionId })\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error eliminando bot IA:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  }\n}\n\n// 🔧 **FUNCIONES PARA WEBHOOKS**\nexport const webhooksApi = {\n  // Obtener todos los webhooks del usuario\n  async obtenerWebhooks(): Promise<Webhook[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/webhook/list`)\n      if (!response.ok) throw new Error('Error al obtener webhooks')\n      \n      const data = await response.json()\n      return data.success ? data.data : []\n    } catch (error) {\n      console.error('Error obteniendo webhooks:', error)\n      return []\n    }\n  },\n\n  // Crear nuevo webhook\n  async crearWebhook(config: {\n    userId: string\n    sessionId: string\n    events?: string[]\n    webhookUrl?: string\n  }): Promise<{ success: boolean; data?: any; error?: string }> {\n    try {\n      // Verificar límites primero\n      const verificacion = await planesApi.verificarLimites('webhook')\n      if (!verificacion.permitido) {\n        return {\n          success: false,\n          error: `Has alcanzado el límite de webhooks (${verificacion.usoActual}/${verificacion.limite}) para tu plan ${verificacion.plan}`\n        }\n      }\n\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/webhook/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId: config.userId,\n          sessionId: config.sessionId,\n          events: config.events || ['ALL'],\n          webhookUrl: config.webhookUrl || null\n        })\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success,\n        data: data.data,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error creando webhook:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  },\n\n  // Actualizar webhook\n  async actualizarWebhook(webhookId: string, config: {\n    events?: string[]\n    webhookUrl?: string\n    active?: boolean\n  }): Promise<{ success: boolean; error?: string }> {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/webhook/${webhookId}/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(config)\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error actualizando webhook:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  },\n\n  // Eliminar webhook\n  async eliminarWebhook(webhookId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) throw new Error('No autenticado')\n\n      const response = await fetch(`${API_BASE_URL}/webhook/${webhookId}/delete`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      const data = await response.json()\n      return {\n        success: data.success,\n        error: data.success ? undefined : data.message\n      }\n    } catch (error) {\n      console.error('Error eliminando webhook:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      }\n    }\n  }\n}\n\nexport default {\n  sesionesApi,\n  botsIAApi,\n  webhooksApi\n}\n